/*
-----------------------------------------------------------------------------
Filename:    SnakesAndLadders.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.8.x Application Wizard for VC10 (May 2012)
      https://bitbucket.org/jacmoe/ogreappwizards
-----------------------------------------------------------------------------
*/

#include "SnakesAndLadders.h"

//FMOD includes
#pragma comment(lib,"fmodex_vc.lib")

float const SnakesAndLadders::BOARDER_WIDTH = 7;
float const SnakesAndLadders::BOARD_WIDTH = 160;
float const SnakesAndLadders::BOARD_LENGTH = 160;
float const SnakesAndLadders::MOVE_DISTANCE = (BOARD_WIDTH-(BOARDER_WIDTH*2))/10;

//-------------------------------------------------------------------------------------
SnakesAndLadders::SnakesAndLadders(void): players(4), humanPlayers(1), turn(1), dieOne(0), dieTwo(0), printNumber(0){
	
}
//-------------------------------------------------------------------------------------
SnakesAndLadders::~SnakesAndLadders(void)
{
}

//-------------------------------------------------------------------------------------
bool SnakesAndLadders::frameRenderingQueued(const Ogre::FrameEvent& evt){
    if(mWindow->isClosed())
        return false;

    if(mShutDown)
        return false;

    //Need to capture/update each device
    mKeyboard->capture();
    mMouse->capture();

    mTrayMgr->frameRenderingQueued(evt);

	

	mDetailsPanel->show();
	mDetailsPanel->setParamValue(0, "Die one rolled a");
	mDetailsPanel->setParamValue(1, Ogre::StringConverter::toString(dieOne));
	mDetailsPanel->setParamValue(2, "Die two rolled a");
	mDetailsPanel->setParamValue(3, Ogre::StringConverter::toString(dieTwo));
	mDetailsPanel->setParamValue(4, "");
	
	if (turn%players == 0){
		printNumber = 4;
	}
	else{
		printNumber = turn%players;
	}
	mDetailsPanel->setParamValue(5, "It's Player " + Ogre::StringConverter::toString(printNumber) + "'s turn");
	
	mDetailsPanel->setParamValue(6, Ogre::StringConverter::toString(gamePlayers.at(printNumber-1)->getSquareNumber()));

	FMODsys->update();
	srand( time(0));
    return true;
}

int SnakesAndLadders::rollDie(){
	return rand()%6+1;
}

void SnakesAndLadders::createScene(void)
{
#pragma region
	//setup FMOD
	result = FMOD::System_Create(&FMODsys);     // Create the main system object.
	if (result != FMOD_OK)
	{
		std::cout << "FMOD error! (%d) %s\n" <<result;// << FMOD_ErrorString(result);
		exit(-1);
	}
 
	result = FMODsys->init(100, FMOD_INIT_NORMAL, 0);   // Initialize FMOD.
     
	if (result != FMOD_OK)
	{
		std::cout << "FMOD error! (%d) %s\n" << result;// << FMOD_ErrorString(result);
		exit(-1);
	}
#pragma endregion Setup Fmod

	//create player and ai
	for (int i = 0; i < players; i++){
		if (i < humanPlayers){
			gamePlayers.push_back(new Player(mSceneMgr, i));
		}
		else{
			gamePlayers.push_back(new Ai(mSceneMgr, i));
		}
	}


#pragma region
	//load sounds
	FMOD::Sound *ladderSound;
	result = FMODsys->createSound(
    "C:/RepeatProjectSnakesAndLadders/SnakesAndLadders/ding.wav",
    FMOD_DEFAULT,
    0,
    &ladderSound);
	if (result != FMOD_OK)
	{
		std::cout << "FMOD error! (%d) %s\n" << result;
		exit(-1);
	}

	FMOD::Sound *snakeSound;
	result = FMODsys->createSound(
    "C:/RepeatProjectSnakesAndLadders/SnakesAndLadders/snake.ogg",
    FMOD_DEFAULT,
    0,
    &snakeSound);
	if (result != FMOD_OK)
	{
		std::cout << "FMOD error! (%d) %s\n" << result;
		exit(-1);
	}
#pragma endregion Load sounds

    mSceneMgr->setAmbientLight(Ogre::ColourValue::White);
	
	Ogre::Plane plane;
	plane.normal = Ogre::Vector3::UNIT_Y;
	plane.d = 0;

	
	mSceneMgr->setSkyBox(true, "Examples/SpaceSkyBox");
 
	Ogre::MeshManager::getSingleton().createPlane("floor", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, plane, 
												BOARD_WIDTH, BOARD_LENGTH, 10, 10, true, 1, 1, 1, Ogre::Vector3::UNIT_Z);
	Ogre::Entity* planeEnt = mSceneMgr->createEntity("plane", "floor");
	planeEnt->setMaterialName("SnakesAndLadders/LadderSnake");
	planeEnt->setCastShadows(false);
	

	Ogre::SceneNode* floorNode = mSceneMgr->createSceneNode("floor1");
	mSceneMgr ->getRootSceneNode()->addChild(floorNode);
	floorNode->attachObject(planeEnt);
	//mTrayMgr->toggleAdvancedFrameStats();
}

bool SnakesAndLadders::keyPressed( const OIS::KeyEvent &arg ){
	switch (arg.key) 
	{
		case OIS::KC_ESCAPE:mShutDown = true;
		break;
		
		case OIS::KC_SPACE: 
			dieOne = rollDie();
			if (gamePlayers.at(printNumber-1)->chooseRollTwo()){dieTwo = rollDie();}
			else {dieTwo = 0;}
			for (int i = 0; i < dieOne+dieTwo; i++){
				//gamePlayers->moveForward(MOVE_DISTANCE);
				gamePlayers.at(printNumber-1)->moveForward(MOVE_DISTANCE);
			}

#pragma region

			if (gamePlayers.at(printNumber-1)->getSquareNumber() == Movers::SNAKE_ONE[0]){ 
				/*FMOD::Channel *channel;
				result = FMODsys->playSound(
				FMOD_CHANNEL_FREE,
				snakeSound,
				false,
				&channel);*/
				for (int i = 0; i<Movers::SNAKE_ONE[0] - Movers::LADDER_ONE[1]; i++){
					gamePlayers.at(printNumber-1)->moveBackward(MOVE_DISTANCE);
				}
			}
			else if (gamePlayers.at(printNumber-1)->getSquareNumber() == Movers::SNAKE_TWO[0]){
				/*FMOD::Channel *channel;
				result = FMODsys->playSound(
				FMOD_CHANNEL_FREE,
				snakeSound,
				false,
				&channel);*/
				for (int i = 0; i<Movers::SNAKE_TWO[0] - Movers::SNAKE_TWO[1]; i++){
 					gamePlayers.at(printNumber-1)->moveBackward(MOVE_DISTANCE);
				}
			}
			else if	(gamePlayers.at(printNumber-1)->getSquareNumber() == Movers::SNAKE_THREE[0]){
				/*FMOD::Channel *channel;
				result = FMODsys->playSound(
				FMOD_CHANNEL_FREE,
				snakeSound,
				false,
				&channel);*/
				for (int i = 0; i<Movers::SNAKE_THREE[0] - Movers::SNAKE_THREE[1]; i++){
					gamePlayers.at(printNumber-1)->moveBackward(MOVE_DISTANCE);
				}
			}
			else if	(gamePlayers.at(printNumber-1)->getSquareNumber() == Movers::SNAKE_FOUR[0]){
				/*FMOD::Channel *channel;
				result = FMODsys->playSound(
				FMOD_CHANNEL_FREE,
				snakeSound,
				false,
				&channel);*/
				for (int i = 0; i<Movers::SNAKE_FOUR[0] - Movers::SNAKE_FOUR[1]; i++){
					gamePlayers.at(printNumber-1)->moveBackward(MOVE_DISTANCE);
				}
			}
			else if	(gamePlayers.at(printNumber-1)->getSquareNumber() == Movers::SNAKE_FIVE[0]){
				/*FMOD::Channel *channel;
				result = FMODsys->playSound(
				FMOD_CHANNEL_FREE,
				snakeSound,
				false,
				&channel);*/
				for (int i = 0; i<Movers::SNAKE_FIVE[0] - Movers::SNAKE_FIVE[1]; i++){
					gamePlayers.at(printNumber-1)->moveBackward(MOVE_DISTANCE);
				}
			}
				
				
			else if (gamePlayers.at(printNumber-1)->getSquareNumber() == Movers::LADDER_ONE[0]){
				/*FMOD::Channel *channel;
				result = FMODsys->playSound(
				FMOD_CHANNEL_FREE,
				ladderSound,
				false,
				&channel);*/
				for (int i = 0; i<Movers::LADDER_ONE[1] - Movers::LADDER_ONE[0]; i++){
					gamePlayers.at(printNumber-1)->moveForward(MOVE_DISTANCE);
				}
			}
			else if	(gamePlayers.at(printNumber-1)->getSquareNumber() == Movers::LADDER_TWO[0]){
				/*FMOD::Channel *channel;
				result = FMODsys->playSound(
				FMOD_CHANNEL_FREE,
				ladderSound,
				false,
				&channel);*/
				for (int i = 0; i<Movers::LADDER_ONE[1] - Movers::LADDER_TWO[0]; i++){
					gamePlayers.at(printNumber-1)->moveForward(MOVE_DISTANCE);
				}
			}
			else if	(gamePlayers.at(printNumber-1)->getSquareNumber() == Movers::LADDER_THREE[0]){
				/*FMOD::Channel *channel;
				result = FMODsys->playSound(
				FMOD_CHANNEL_FREE,
				ladderSound,
				false,
				&channel);*/
				for (int i = 0; i<Movers::LADDER_ONE[1] - Movers::LADDER_THREE[0]; i++){
					gamePlayers.at(printNumber-1)->moveForward(MOVE_DISTANCE);
				}
			}
			else if	(gamePlayers.at(printNumber-1)->getSquareNumber() == Movers::LADDER_FOUR[0]){
				/*FMOD::Channel *channel;
				result = FMODsys->playSound(
				FMOD_CHANNEL_FREE,
				ladderSound,
				false,
				&channel);*/
				for (int i = 0; i<Movers::LADDER_ONE[1] - Movers::LADDER_FOUR[0]; i++){
					gamePlayers.at(printNumber-1)->moveForward(MOVE_DISTANCE);
				}
			}
#pragma region check Ladders+Snakes
			
			turn++;
			break;


	default:
		break;
	}
	
	mCameraMan->injectKeyDown(arg);
	return true;
}

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        SnakesAndLadders app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
